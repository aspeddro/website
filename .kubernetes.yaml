---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: website-nextjs-staging
  namespace: website
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
    type: RollingUpdate
  selector:
    matchLabels:
      app: website-nextjs-staging
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: website-nextjs-staging
    spec:
      containers:
        - name: website-nextjs-staging
          image: gcr.io/PROJECT_ID/IMAGE_NAME:TAG
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          envFrom:
            - secretRef:
                name: website-nextjs-staging-secrets
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              cpu: 1000m
              memory: 2G
            # limits:
            #   cpu: 2000m
            #   memory: 4G
      restartPolicy: Always
---
# Service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: website-nextjs-staging
  name: website-nextjs-staging
  namespace: website
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 3000
  selector:
    app: website-nextjs-staging
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: website-nextjs-staging-ingress
  namespace: website
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/issuer: "letsencrypt-production"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - stagingv2.basedosdados.org
      secretName: website-nextjs-staging-tls
  rules:
    - host: stagingv2.basedosdados.org
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: website-nextjs-staging
                port:
                  number: 80
